{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["readTag","a","window","reader","NDEFReader","scan","onreading","event","decoder","TextDecoder","message","records","record","decode","data","substring","fillImg","consoleLog","document","getElementById","innerHTML","src","App","className","id","class","alt","type","onClick","data-icon","data-inline","Boolean","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"qQAIeA,I,2EAAf,4BAAAC,EAAA,2DAGM,eAAgBC,QAHtB,wBAMUC,EAAS,IAAIC,WANvB,kBAUYD,EAAOE,OAVnB,OAaMF,EAAOG,UAAY,SAAAC,GAGjB,IAH0B,EAGpBC,EAAU,IAAIC,YAHM,cAMLF,EAAMG,QAAQC,SANT,IAM1B,2BAA4C,CAAC,IAAlCC,EAAiC,QAQQ,QAA/CJ,EAAQK,OAAOD,EAAOE,MAAMC,UAAU,EAAG,IAC1CC,EAAQR,EAAQK,OAAOD,EAAOE,OAGkB,QAA/CN,EAAQK,OAAOD,EAAOE,MAAMC,UAAU,EAAG,IAC1CE,EAAW,KAAOT,EAAQK,OAAOD,EAAOE,MAAQ,OAnB1B,gCAblC,gDAsCMG,EAAW,EAAD,IAtChB,gCA0CIA,EAAW,6BA1Cf,0D,sBAgDA,SAASA,EAAWH,GACDI,SAASC,eAAe,OAC9BC,WAAaN,YAK1B,SAASE,EAAQF,GACDI,SAASC,eAAe,WAC9BE,IAAMP,EA4BDQ,MAxBf,WACE,OAEE,yBAAKC,UAAU,mBAEb,kDAEA,yBAAKA,UAAU,OACb,yBAAKC,GAAG,UAAUH,IAAI,GAAGI,MAAM,oBAAoBC,IAAI,MAGzD,oCACA,yBAAKH,UAAU,UACb,yBAAKC,GAAG,SAGV,4BAAQG,KAAK,SAASJ,UAAU,MAAMK,QAAS5B,GAC7C,0BAAMuB,UAAU,UAAUM,YAAU,kBAAkBC,cAAY,aCtEtDC,QACW,cAA7B7B,OAAO8B,SAASC,UAEe,UAA7B/B,OAAO8B,SAASC,UAEhB/B,OAAO8B,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFnB,SAASC,eAAe,SDyHpB,kBAAmBmB,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMnC,a","file":"static/js/main.07ed6cf3.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\n/*global NDEFReader*/\nasync function readTag(){\n  \n  /* if NDEFReader is available on the device */\n  if (\"NDEFReader\" in window) {\n\n    /* initialize the reader */\n    const reader = new NDEFReader();\n\n    try {\n      /* Wait for promise - The scan() method of NDEFReader interface reads NDEF records from compatible NFC tag.  */\n      await reader.scan();\n\n      /* The onreading property is called whenever a new reading is available from a NFC tag, when the tag is within the reader's magnetic induction field. */\n      reader.onreading = event => {\n\n        /* The TextDecoder interface represents a decoder for a specific text encoding. It takes a stream of bytes as input and emits a stream of code points */\n        const decoder = new TextDecoder();\n\n        /* Loop runs thru all datafields of the NFC tag, this gives a full list of all datas */\n        for (const record of event.message.records) {\n\n          /* To display the Image: Filter if type is a URL call fillImg() with the information of the data field */\n          /*\n          if(record.recordType == 'url' && decoder.decode(record.data).substring(0, 4) == 'http'){\n            fillImg(decoder.decode(record.data));\n          }\n          */\n          if(decoder.decode(record.data).substring(0, 4) == 'http'){\n            fillImg(decoder.decode(record.data));\n          }\n          /* To print the Logs: Filter if information doesn't start with 'http' call consoleLog() with the information of the data field */\n          if(decoder.decode(record.data).substring(0, 4) != 'http'){\n            consoleLog(\"\\n\" + decoder.decode(record.data) + \"\\n\" );\n          }\n        }\n      }\n    } catch(error) {\n      /* if Try block doesn't work call consoleLog() and print the error message  */\n      consoleLog(error);\n    }\n  } else {\n    /* if NDEFReader is NOT available */\n    consoleLog(\"Web NFC is not supported.\");\n  }\n}\n\n/* Function to print the data informations in the Logbox\ngets the HTML element with ID 'log' and prints the information in it */\nfunction consoleLog(data) {\n  var logElement = document.getElementById('log');\n  logElement.innerHTML += data + '\\n' + '</br>';\n};\n\n/* Function to display the Image\ngets the HTML element with ID 'fillImg' and put the source to the giving source of the NFC tag */\nfunction fillImg(data) {\n  var linkImg = document.getElementById('fillImg');\n  linkImg.src = data;\n};\n\n\nfunction App() {\n  return (\n\n    <div className=\"app text-center\">\n\n      <h4>Scann your NFC-Tag</h4>\n\n      <div className=\"img\">\n        <img id=\"fillImg\" src=\"\" class=\"img-fluid rounded\" alt=\"\"></img>\n      </div>\n\n      <p>Logs:</p>\n      <div className=\"divlog\">\n        <div id=\"log\"></div>\n      </div>\n\n      <button type=\"button\" className=\"btn\" onClick={readTag}>\n        <span className=\"iconify\" data-icon=\"ic-baseline-nfc\" data-inline=\"false\"></span>\n      </button>\n      \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}