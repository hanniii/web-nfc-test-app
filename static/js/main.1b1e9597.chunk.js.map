{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["readTag","a","window","reader","NDEFReader","scan","onreading","event","decoder","TextDecoder","message","records","record","recordType","decode","data","substring","consoleLog","writeTag","writer","NDEFWriter","write","document","getElementById","innerHTML","App","className","src","class","alt","id","type","onClick","Boolean","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"qQAIeA,I,2EAAf,4BAAAC,EAAA,2DAEM,eAAgBC,QAFtB,wBAGUC,EAAS,IAAIC,WAHvB,kBAKYD,EAAOE,OALnB,OAMMF,EAAOG,UAAY,SAAAC,GACjB,IAD0B,EACpBC,EAAU,IAAIC,YADM,cAELF,EAAMG,QAAQC,SAFT,IAE1B,2BAA4C,CAAC,IAAlCC,EAAiC,QAClB,OAArBA,EAAOC,YAAsE,QAA/CL,EAAQM,OAAOF,EAAOG,MAAMC,UAAU,EAAG,IAC/DR,EAAQM,OAAOF,EAAOG,MAKjCE,EAAW,OAAST,EAAQM,OAAOF,EAAOG,QATlB,gCANlC,gDAoBME,EAAW,EAAD,IApBhB,gCAuBIA,EAAW,6BAvBf,0D,+BA4BeC,I,2EAAf,4BAAAjB,EAAA,2DACM,eAAgBC,QADtB,wBAEUiB,EAAS,IAAIC,WAFvB,kBAIYD,EAAOE,MAAM,yBAJzB,OAKMJ,EAAW,yBALjB,gDAOMA,EAAW,EAAD,IAPhB,gCAUIA,EAAW,6BAVf,0D,sBAcA,SAASA,EAAWF,GACDO,SAASC,eAAe,OAC9BC,WAAaT,YAmBXU,MAhBf,WACE,OACE,yBAAKC,UAAU,mBACb,yBAAKA,UAAU,WACb,yBAAKC,IAAI,gBAAgBC,MAAM,oBAAoBC,IAAI,MAEzD,yBAAKH,UAAU,UACb,yBAAKI,GAAG,SAEV,oDACA,4BAAQC,KAAK,SAASL,UAAU,MAAMM,QAAShC,GAA/C,WACA,4BAAQ+B,KAAK,SAASL,UAAU,MAAMM,QAASd,GAA/C,eClDce,QACW,cAA7B/B,OAAOgC,SAASC,UAEe,UAA7BjC,OAAOgC,SAASC,UAEhBjC,OAAOgC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFjB,SAASC,eAAe,SDyHpB,kBAAmBiB,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMrC,a","file":"static/js/main.1b1e9597.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\n/*global NDEFReader*/\nasync function readTag(){\n  var nfcImg;\n  if (\"NDEFReader\" in window) {\n    const reader = new NDEFReader();\n    try {\n      await reader.scan();\n      reader.onreading = event => {\n        const decoder = new TextDecoder();\n        for (const record of event.message.records) {\n          if(record.recordType == 'url' && decoder.decode(record.data).substring(0, 4) == 'http'){\n            nfcImg = decoder.decode(record.data);\n            //consoleLog(\"nfcImg: \" + nfcImg);\n          }\n          //consoleLog(\"Record type:  \" + record.recordType);\n          //consoleLog(\"MIME type:    \" + record.mediaType);\n          consoleLog(\"\\n\\n\" + decoder.decode(record.data));\n        }\n        //consoleLog(\"nfcImg: \" + nfcImg);\n      }\n    } catch(error) {\n      consoleLog(error);\n    }\n  } else {\n    consoleLog(\"Web NFC is not supported.\");\n  }\n}\n\n/*global NDEFWriter*/\nasync function writeTag() {\n  if (\"NDEFWriter\" in window) {\n    const writer = new NDEFWriter();\n    try {\n      await writer.write(\"What Web Can Do Today\");\n      consoleLog(\"NDEF message written!\");\n    } catch(error) {\n      consoleLog(error);\n    }\n  } else {\n    consoleLog(\"Web NFC is not supported.\");\n  }\n}\n\nfunction consoleLog(data) {\n  var logElement = document.getElementById('log');\n  logElement.innerHTML += data + '\\n' + '</br>';\n};\n\nfunction App() {\n  return (\n    <div className=\"app text-center\">\n      <div className=\"img cen\">\n        <img src=\"{nfcImg:text}\" class=\"img-fluid rounded\" alt=\"\"></img>\n      </div>\n      <div className=\"divlog\">\n        <div id=\"log\"></div>\n      </div>\n      <h3>Scann your NFC Tag: </h3>\n      <button type=\"button\" className=\"btn\" onClick={readTag}>Scannen</button>\n      <button type=\"button\" className=\"btn\" onClick={writeTag}>Schreiben</button>\n    </div>\n  );\n}\n\nexport default App;\n//<img src=\"{nfcImg}\" class=\"img-fluid rounded\" alt=\"\"></img>","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}